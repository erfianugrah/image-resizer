{
  "version": 4,
  "terraform_version": "0.15.4",
  "serial": 5,
  "lineage": "76361dc6-a7c4-10d3-381e-46ef6140b8c8",
  "outputs": {},
  "resources": [
    {
      "mode": "managed",
      "type": "cloudflare_worker_route",
      "name": "uploads",
      "provider": "provider[\"registry.terraform.io/cloudflare/cloudflare\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "d7d186d7bdcc4b15a7f155f943d08540",
            "pattern": "*erfianugrah.com/wp-content/uploads/*",
            "script_name": "prod_resizer",
            "zone_id": "3f2c4daa43d5920f313654a873b31d06"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "cloudflare_worker_script.prod_resizer"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "cloudflare_worker_script",
      "name": "prod_resizer",
      "provider": "provider[\"registry.terraform.io/cloudflare/cloudflare\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "content": "addEventListener('fetch', event =\u003e {\n    if (!/image-resizing/.test(event.request.headers.get(\"via\"))) {\n        return event.respondWith(handleRequest(event.request))\n    }\n})\n\nasync function handleRequest(request) {\n\nconst newRequest = new URL(request.url)\nconst customCacheKey = `${newRequest.hostname}${newRequest.pathname}${newRequest.search}`\nconst urlParams = newRequest.searchParams\n\nconst cacheAssets = [\n    { asset: 'image', key: customCacheKey, regex: /^.*\\.(jpg|jpeg|png|bmp|pict|tif|tiff|webp|gif|heif|exif|bat|bpg|ppm|pgn|pbm|pnm)/, info: 0, ok: 86400, redirects: 30, clientError: 10, serverError: 0 },\n]\n\nconst imageDeviceOptions = {\n    desktop: { height: 1440, width: 2560, fit: 'scale-down', metadata: 'copyright', quality: 85 },\n    tablet: { height: 1080, width: 1920, fit: 'scale-down', metadata: 'copyright', quality: 85 },\n    mobile: { height: 720, width: 1280, fit: 'scale-down', metadata: 'copyright', quality: 85 }\n}\n\nconst height = urlParams.get('height') || undefined\nconst width = urlParams.get('width') || undefined\nconst fit = urlParams.get('fit') || undefined\nconst quality = urlParams.get('quality') || undefined\nconst metadata = urlParams.get('metadata') || undefined\n\nconst imageURLOptions = { width, height, fit, quality, metadata }\n\nconst subRequest = new Request(request)\nconst device = subRequest.headers.get('cf-device-type') || {desktop}\nconst deviceMatch = imageDeviceOptions[device]\n\nconst { asset, regex, ...cache } = cacheAssets.find( ({regex}) =\u003e newRequest.pathname.match(regex)) ?? {}\n\nlet options = deviceMatch || {}; for (k in imageURLOptions) { \n    if (imageURLOptions[k]) options[k] = imageURLOptions[k]; \n}\n\nconst imageResizer = cache ? options : {}\n\nconst newResponse = await fetch(subRequest,\n        { cf:\n            {\n                cacheKey: cache.key,\n                cacheEverything: true,\n                cacheTtlByStatus: {\n                    '100-199': cache.info,\n                    '200-299': cache.ok,\n                    '300-399': cache.redirects,\n                    '400-499': cache.clientError,\n                    '500-599': cache.serverError\n                    },\n                image: {\n                    width: imageResizer.width,\n                    height: imageResizer.height,\n                    fit: imageResizer.fit ,\n                    metadata: imageResizer.metadata,\n                    quality: imageResizer.quality\n                    }\n            },\n        })\n\nlet response = new Response(newResponse.body, newResponse)\nresponse.headers.set(\"debug-ir\", JSON.stringify(imageResizer))\nresponse.headers.set(\"debug-cache\", JSON.stringify(cache))\n\nconst catchResponseError = response.ok || response.redirected ? response : await fetch(request)\nreturn catchResponseError\n}",
            "id": "prod_resizer",
            "kv_namespace_binding": [],
            "name": "prod_resizer",
            "plain_text_binding": [],
            "secret_text_binding": [],
            "webassembly_binding": []
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    }
  ]
}
